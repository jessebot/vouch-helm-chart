{{- $podAnnotations := .Values.podAnnotations }}
{{- if not .Values.config.existingSecretName }}
{{- $secretAnnotation := dict "checksum/secret" (include (print $.Template.BasePath "/secret.yaml") . | sha256sum) }}
{{- $podAnnotations := merge $podAnnotations $secretAnnotation }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vouch.fullname" . }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $value := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  labels:
{{ include "vouch.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
{{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{ if eq .Values.strategy.type "Recreate" }}
    rollingUpdate: null
{{- end }}
{{- end }}
  selector:
    matchLabels:
      {{- include "vouch.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "vouch.selectorLabels" . | nindent 8 }}
      {{- if $podAnnotations }}
      annotations:
        {{- range $key, $value := $podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "vouch.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
            {{- toYaml .Values.command | nindent 12 }}
          args:
            {{- toYaml .Values.args | nindent 12 }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if not .Values.config.overrideConfigExistingSecretName }}
            - name: VOUCH_PORT
              value: {{ .Values.config.vouch.port | quote }}
            - name: VOUCH_LOGLEVEL
              value: {{ .Values.config.vouch.logLevel | quote }}
            - name: VOUCH_TESTING
              value: {{ .Values.config.vouch.testing | quote }}
            - name: VOUCH_ALLOWALLUSERS
              value: {{ .Values.config.vouch.allowAllUsers | quote }}
            {{- if or .Values.config.vouch.domains (and .Values.config.vouch.existingSecret .Values.config.vouch.secretKeys.domains) }}
            - name: VOUCH_DOMAINS
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.config.secret.name" . }}
                  key: {{ .Values.config.vouch.secretKeys.domains }}
            {{- end }}
            {{- if or .Values.config.vouch.whiteList (and .Values.config.vouch.existingSecret .Values.config.vouch.secretKeys.whiteList) }}
            - name: VOUCH_WHITELIST
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.config.secret.name" . }}
                  key: {{ .Values.config.vouch.secretKeys.whiteList }}
            {{- end }}
            {{- if or .Values.config.vouch.jwt.secret (and .Values.config.vouch.existingSecret .Values.config.vouch.secretKeys.jwtSecret) }}
            - name: VOUCH_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.config.secret.name" . }}
                  key: {{ .Values.config.vouch.secretKeys.jwtSecret }}
            {{- end }}
            {{- if .Values.config.oauth.provider }}
            - name: OAUTH_PROVIDER
              value: {{ .Values.config.oauth.provider }}
            {{- end }}
            {{- if or .Values.config.oauth.clientId (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.clientId)}}
            - name: OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.clientId }}
            {{- end }}
            {{- if or .Values.config.oauth.clientSecret (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.clientSecret)}}
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.clientSecret }}
            {{- end }}
            {{- if or .Values.config.oauth.authUrl (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.authUrl) }}
            - name: OAUTH_AUTH_URL
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.authUrl }}
            {{- end }}
            {{- if or .Values.config.oauth.tokenUrl (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.tokenUrl) }}
            - name: OAUTH_TOKEN_URL
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.tokenUrl }}
            {{- end }}
            {{- if or .Values.config.oauth.userInfoUrl (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.userInfoUrl) }}
            - name: OAUTH_USER_INFO_URL
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.userInfoUrl }}
            {{- end }}
            {{- if or .Values.config.oauth.callbackUrls (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.callbackUrls) }}
            - name: OAUTH_CALLBACK_URLS
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.callbackUrls }}
            {{- end }}
            {{- if .Values.config.oauth.scopes }}
            - name: OAUTH_SCOPES
              value: {{ join "," .Values.config.oauth.scopes }}
            {{- end }}
            {{- if or .Values.config.oauth.preferredDomain (and .Values.config.oauth.existingSecret .Values.config.oauth.secretKeys.preferredDomain ) }}
            - name: OAUTH_PREFERREDDOMAIN
              valueFrom:
                secretKeyRef:
                  name: {{ template "vouch.oauth.secret.name" . }}
                  key: {{ .Values.config.oauth.secretKeys.preferredDomain }}
            {{- end }}
            {{- range .Values.extraEnvVars }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.config.vouch.port }}
              protocol: TCP
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
          {{- if and (semverCompare ">=1.16-0" .Capabilities.KubeVersion.GitVersion) .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
          {{- end }}
          volumeMounts:
          - name: data
            mountPath: /data
          {{ if .Values.config.overrideConfigExistingSecretName }}
          - name: config
            mountPath: /config
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{ if .Values.config.overrideConfigExistingSecretName }}
      - name: config
        secret:
          secretName: {{ .Values.config.overrideConfigExistingSecretName }}
      {{- end }}
      - name: data
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
